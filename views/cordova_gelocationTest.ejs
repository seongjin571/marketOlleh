<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>코르도바 GPS TEST</title>
    <meta name="viewport" content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0'>

</head>
<body onload="onLoad()">
  <script src='/cordova/cordova_plugins.js'></script>
  <script src='/cordova/cordova.js'></script>
    <script type="text/javascript">

    // ( hw edit; back button ) @overriding
    function onLoad() {
        document.addEventListener("deviceready", onDeviceReady, false);
    }

    function onDeviceReady() {
        document.addEventListener("backbutton", onBackKeyDown, false);
    }

    function onBackKeyDown() {
        navigator.notification.confirm('앱을 종료하시겠습니까?', onBackKeyDownMsg, '스마트오더', '취소, 종료');
    }

    function onBackKeyDownMsg(button) {
        if(button == 2) {
            navigator.app.exitApp();
        }
    }
    </script>


	<div id="map" style="width:90%;height:250px;margin-left: 5%; "></div>
	<input type="button" value="Get GPS" id="GetButton" />
    <!-- <script src='/cordova/cordova.js'></script> -->
    <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=1f14a7f1512988347e7ffdd75ac7ab4c"></script>
    <script type="text/javascript">

    var markers = []; // 지도에 표시된 마커 객체를 가지고 있을 배열입니다

    // 지도를 표시할 div (id)
    var mapContainer = document.getElementById('map'),
        mapOption = {
            center: new daum.maps.LatLng(33.450701, 126.570667), // 지도의 중심좌표
            level: 4 // 지도의 확대 레벨
        };

    var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다


    // 마커 하나를 지도위에 표시합니다
    addMarker(new daum.maps.LatLng(33.450701, 126.570667));


    // 마커를 생성하고 지도위에 표시하는 함수입니다
    function addMarker(position) {

        // 마커를 생성합니다
        var marker = new daum.maps.Marker({
            position: position
        });

        // 마커가 지도 위에 표시되도록 설정합니다
        marker.setMap(map);

        // 생성된 마커를 배열에 추가합니다
        markers.push(marker);
    }

    // 배열에 추가된 마커들을 지도에 표시하거나 삭제하는 함수
    function setMarkers(map) {
        for (var i = 0; i < markers.length; i++) {
            markers[i].setMap(map);
        }
    }

    function relayout() {
        // 지도를 표시하는 div 크기를 변경한 이후 지도가 정상적으로 표출되지 않을 수도 있습니다
        // 크기를 변경한 이후에는 반드시  map.relayout 함수를 호출해야 합니다
        // window의 resize 이벤트에 의한 크기변경은 map.relayout 함수가 자동으로 호출됩니다
        map.relayout();
    }
    /*
    function changeCenter(mapLat, mapLng) {
        var moveLatLon = new daum.maps.LatLng(mapLat, mapLng);
        relayout();
        // 입력받은 좌표에 마커 추가
        addMarker(moveLatLon);

        // 지도 중심을 이동 시킵니다
        map.setCenter(moveLatLon);
        map.setLevel(4);

    } // changeCenter
	*/
</script>
<script type="text/javascript">

    var Latitude = undefined;
    var Longitude = undefined;

    // Get geo coordinates
    function getMapLocation(event) {
        navigator.geolocation.getCurrentPosition(onMapSuccess, onMapError, { enableHighAccuracy: true });
    }

    // Success callback for get geo coordinates
    var onMapSuccess = function (position) {

        Latitude = position.coords.latitude;
        Longitude = position.coords.longitude;

        getMap(Latitude, Longitude);
    }

    // Get map by using coordinates
    function getMap(latitude, longitude) {

    	var mapContainer = document.getElementById('map'),
    		mapOptions = {
            	center: new daum.maps.LatLng(0, 0),
            	level: 4
        	};

		var map = new daum.maps.Map(mapContainer, mapOptions);

		// 마커 좌표 생성을 위한 변수
        var latLong = new daum.maps.LatLng(latitude, longitude);

        // 마커 생성
        var marker = new daum.maps.Marker({
            position: latLong
        });

        marker.setMap(map); // 마커 찍어주기
        map.setCenter(marker.getPosition()); // 맵 중심 좌표 바꾸기
        relayout();
    }

    // Success callback for watching your changing position
    var onMapWatchSuccess = function (position) {

        var updatedLatitude = position.coords.latitude;
        var updatedLongitude = position.coords.longitude;

        if (updatedLatitude != Latitude && updatedLongitude != Longitude) {

            Latitude = updatedLatitude;
            Longitude = updatedLongitude;

            getMap(updatedLatitude, updatedLongitude);
        }
    }

    // Error callback
    function onMapError(error) {
        console.log('code: ' + error.code + '\n' + 'message: ' + error.message + '\n');
    }

    // Watch your changing position
    function watchMapPosition() {
        return navigator.geolocation.watchPosition
        (onMapWatchSuccess, onMapError, { enableHighAccuracy: true });
    }

    GetButton.addEventListener('click', getMapLocation, false);

</script>
</body>
</html>
